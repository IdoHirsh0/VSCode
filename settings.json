{
    /********** General **********/
    "editor.suggestSelection": "first",
    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
    "workbench.startupEditor": "none",

    // Remove warning on untrusted authors
    "security.workspace.trust.untrustedfiles": "open", 

    // File associations
    "files.associations": {
        "*.do": "coffeescript"
    },
    
    // File exclude
    "files.exclude": {
        "**/__pycache__": true
    },
    /*****************************/

    /********** Explorer **********/
    "explorer.confirmDelete": false,
    "explorer.confirmDragAndDrop": false,
    "explorer.compactFolders": false,
    /******************************/

    /********** Looks **********/
    // Font
    "editor.fontFamily": "Ubuntu Mono", // Cascadia Code | Cascadia Mono | Consolas | Consolas ligaturized v2 | Courier Prime | Fira Code | Hack Nerd Font Mono | Hasklig | Jetbrains Mono | Jetbrains Mono NL | Monaco for Powerline | Ubuntu Mono
    "editor.fontSize": 22,
    "editor.fontLigatures": true,
    "editor.tokenColorCustomizations": {
        "textMateRules": [
            {
                // Global scope
                "scope": [
                    ""
                ],
                "settings": {
                    "fontStyle": ""
                },
            },
            {
                // Specific scopes
                "scope": [
                    "keyword.operator",
                    "constant.numeric",
                ],
                "settings": {
                    "fontStyle": "",
                }
            },
        ]
    },

    // Theme
    "workbench.iconTheme": "material-icon-theme",
    "workbench.colorCustomizations": {
        "[Material Theme Darker]": {
            "statusBar.debuggingBackground": "#212121"
        }
    },

    // Format
    "editor.formatOnSave": true,
    "editor.formatOnPaste": true,
    "editor.formatOnType": true,
    "json.format.enable": false,  // Disable json formatting

    // Terminal
    "terminal.integrated.fontSize": 22,
    /*********************************/

    /********** C **********/
    // Run C code in terminal
    "code-runner.runInTerminal": true, 

    "C_Cpp.default.compilerPath": "C:\\Program Files\\mingw-w64\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\mingw64\\bin\\gcc.exe",

    // Formatting
    "C_Cpp.formatting": "vcFormat",
    // Indent
    "C_Cpp.vcFormat.indent.caseLabels": true,
    "C_Cpp.vcFormat.indent.caseContents": true,
    // Space
    "C_Cpp.vcFormat.space.preserveInInitializerList": false,
    "C_Cpp.vcFormat.space.insertAfterSemicolon": true,
    "C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": true,
    "C_Cpp.vcFormat.space.afterCastCloseParenthesis": true,
    // NewLine
    "C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": true,
    "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": true,
    "C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": true,
    "C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,
    "C_Cpp.vcFormat.newLine.beforeElse": true,
    "C_Cpp.vcFormat.newLine.beforeCatch": true,
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "newLine",
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "newLine",
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "newLine",
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "newLine",
    "C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "newLine",
    /***********************/

    /********** Java **********/
    "java.codeGeneration.generateComments": true,
    "[java]": {
        "editor.defaultFormatter": "redhat.java"
    },
    /**************************/

    /********** Python **********/
    "python.formatting.provider": "black",
    "autoDocstring.docstringFormat": "sphinx",
    "autoDocstring.startOnNewLine": true,
    /****************************/

    /********** JS **********/
    "js/ts.implicitProjectConfig.checkJs": true,
    "js/ts.implicitProjectConfig.experimentalDecorators": true,
    "javascript.format.semicolons": "insert",
    /************************/

    /********** Vim **********/
    "vim.easymotion": true,
    "vim.incsearch": true,
    "vim.useSystemClipboard": true,
    "vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    "vim.smartRelativeLine": true,

    "files.autoSave": "onFocusChange",

    "vim.handleKeys": {
      "<C-a>": false,
      "<C-x>": false,
      "<C-c>": false,
      "<C-v>": false,
      "<C-z>": false,
      "<C-y>": false,
      "<C-f>": false,
      "<C-d>": false,
      "<C-j>": false,
      "<C-k>": false
    },

    "vim.leader": "<space>",
    "vim.normalModeKeyBindings": [
        // Save & Quit
        {
            "before": ["<leader>", "w"],
            "after": [":", "w", "<Cr>"]
        },
        {
            "before": ["<leader>", "q"],
            "after": [":", "q", "<Cr>"]
        },
        // Buffer switches
        {
            "before": ["<tab>"],
            "commands": ["workbench.action.nextEditor"]
        },
        {
            "before": ["<S-tab>"],
            "commands": ["workbench.action.previousEditor"]
        },
        // Reveal in explorer
        {
            "before": ["<leader>", "f"],
            "commands": ["revealInExplorer"]
        },
        // Go to start of line
        {
            "before": ["<leader>", "h"],
            "after": ["_"]
        },
        // Go to end of line
        {
            "before": ["<leader>", "l"],
            "after": ["$"]
        },
        // Go to end of line and put ;
        {
            "before": ["<leader>", ";"],
            "after": ["$", "a", ";", "<Esc>", "a"]
        },
        // Create splits
        {
            "before": ["<leader>", "s", "j"],
            "after": ["<C-w>", "s"]
        },
        {
            "before": ["<leader>", "s", "l"],
            "after": ["<C-w>", "v"]
        },
        // Split navigation
        {
            "before": ["<C-h>"],
            "after": ["<C-w>", "h"]
        },
        {
            "before": ["<C-l>"],
            "after": ["<C-w>", "l"]
        },
        {
            "before": ["<C-j>"],
            "after": ["<C-w>", "j"]
        },
        {
            "before": ["<C-k>"],
            "after": ["<C-w>", "k"]
        },
        // Make Y like D, C etc.
        {
            "before": ["Y"],
            "after": ["y", "$"]
        },
        // No highlight
        {
            "before": ["<leader>", "n", "h"],
            "commands": [":nohl"]
        }
    ],
    "vim.insertModeKeyBindings": [
        // Back to normal mode
        {
            "before": [";", "j"],
            "after": ["<Esc>", "<Esc>", "<Esc>"]
        }        
    ],
    "vim.visualModeKeyBindings": [
        // Back to normal mode
        {
            "before": [";", "j"],
            "after": ["<Esc>", "<Esc>", "<Esc>"]
        },
        // Go to start of line
        {
            "before": ["<leader>", "h"],
            "after": ["_"]
        },
        // Go to end of line
        {
            "before": ["<leader>", "l"],
            "after": ["$"]
        },
        // Paste without loosing register
        {
            "before": ["<leader>", "p"],
            "after": ["\"", "_", "d", "P"]
        }
    ],
    "vim.commandLineModeKeyBindings": [
        // Back to normal mode
        {
            "before": [";", "j"],
            "after": ["<Esc>", "<Esc>", "<Esc>"]
        }         
    ],
    /*************************/

    /********** Git **********/
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    "git.autofetch": true,
    /*************************/

    /********** SVG **********/
    "svg.preview.transparencyGrid": false,
    "svg.preview.boundingBox": false,
    "workbench.editorAssociations": {
        "*.svg": "svgPreviewer.customEditor"
    },
    /*************************/

    /********** TabNine **********/
    "tabnine.experimentalAutoImports": true,
    /*****************************/

    /********** Live Share **********/
    "liveshare.audio.startCallOnShare": true,
    /***************************/
}
